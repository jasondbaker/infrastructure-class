{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "SSMAccessRole": {
       "Type": "AWS::IAM::Role",
       "Properties": {
          "AssumeRolePolicyDocument": {
             "Version" : "2012-10-17",
             "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                   "Service": [ "ec2.amazonaws.com" ]
                },
                "Action": [ "sts:AssumeRole" ]
             } ]
          },
          "Path": "/"
       }
    },
    "SSMRolePolicies": {
       "Type": "AWS::IAM::Policy",
       "Properties": {
          "PolicyName": "ssmProperties",
          "PolicyDocument": {
             "Version" : "2012-10-17",
             "Statement": [
               {
                 "Effect": "Allow",
                 "Action": [
                   "ssm:DescribeParameters",
                   "ssm:PutParameter",
                   "ssm:GetParameters",
                   "ssm:DeleteParameter"
                 ],
                 "Resource": {
                   "Fn::Join" : [
                     "",
                     [
                       "arn:aws:ssm:",
                       { "Ref" : "AWS::Region" },
                       ":",
                       { "Ref" : "AWS::AccountId"},
                       {
                         "Fn::Join" : [
                           "",
                           [ ":parameter/", { "Ref": "AWS::StackName" }, ".*" ]
                         ]
                       }
                     ]
                   ]
                  }
                 }
               ]
          },
          "Roles": [ { "Ref": "SSMAccessRole" } ]
       }
    },
    "SSMInstanceProfile": {
       "Type": "AWS::IAM::InstanceProfile",
       "Properties": {
          "Path": "/",
          "Roles": [ { "Ref": "SSMAccessRole" } ]
       }
    },
    "web1pem" : {
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : {
          "Fn::Join" : [
            "",
            [ { "Ref": "AWS::StackName" }, ".web1pem" ]
          ]
        },
        "Type" : "String",
        "Value" : "0",
        "Description": "web1 instance private key."
      }
    },
    "web2pem" : {
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : {
          "Fn::Join" : [
            "",
            [ { "Ref": "AWS::StackName" }, ".web2pem" ]
          ]
        },
        "Type" : "String",
        "Value" : "0",
        "Description": "web2 instance private key."
      }
    },
    "wordpressVpc": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
            "EnableDnsSupport": "true",
            "EnableDnsHostnames": "true",
            "CidrBlock": "10.0.0.0/16",
            "Tags": [
                {
                    "Key": "Environment",
                    "Value": "Test"
                }
            ]
        }
    },
    "publicSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "wordpressVpc"
            },
            "CidrBlock": "10.0.0.0/24",
             "AvailabilityZone" : {
                "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
              }
        }
    },
    "publicSubnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "wordpressVpc"
            },
            "CidrBlock": "10.0.1.0/24",
             "AvailabilityZone" : {
                "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
              }
        }
    },
    "privateSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "wordpressVpc"
            },
            "CidrBlock": "10.0.2.0/24",
            "AvailabilityZone" : {
                "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
              }
        }
    },
    "privateSubnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "wordpressVpc"
            },
            "CidrBlock": "10.0.3.0/24",
            "AvailabilityZone" : {
                "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
              }
        }
    },
    "web1": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
            "InstanceType": "t2.micro",
            "ImageId": {"Ref": "AMI"},
            "IamInstanceProfile": {
              "Ref": "SSMInstanceProfile"
            },
            "KeyName": {
                "Ref": "KeyName"
            },
            "NetworkInterfaces": [
                {
                    "GroupSet": [
                        {
                            "Ref": "WebServerSecurityGroup"
                        }
                    ],
                    "AssociatePublicIpAddress": "true",
                    "DeviceIndex": "0",
                    "DeleteOnTermination": "true",
                    "SubnetId": {
                        "Ref": "publicSubnet1"
                    }
                }
            ],
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "web1"
                }
            ],
            "UserData" : {
              "Fn::Base64" : {
                "Fn::Join" : [
                  "", [
                    "#!/bin/bash -xe\n",
                    "ssh-keygen -f /home/ec2-user/.ssh/web1-key.pem -q -N \"\"\n",
                    "chown ec2-user:ec2-user /home/ec2-user/.ssh/web1-key.pem\n",
                    "chown ec2-user:ec2-user /home/ec2-user/.ssh/web1-key.pem.pub\n",
                    "PEMFILE=`cat /home/ec2-user/.ssh/web1-key.pem`\n",
                    "aws ssm put-parameter --name ", { "Ref" : "web1pem" }, " --type String --value \"${PEMFILE}\" --overwrite --region ", { "Ref" : "AWS::Region" },"\n",
                    "cat /home/ec2-user/.ssh/web1-key.pem.pub >> /home/ec2-user/.ssh/authorized_keys\n",
                    "# Signal the status from cfn-init\n",
                    "/opt/aws/bin/cfn-signal -e $? ",
                    "         --stack ",
                    {
                        "Ref": "AWS::StackName"
                    },
                    "         --resource web1 ",
                    "         --region ",
                    {
                        "Ref": "AWS::Region"
                    },
                    "\n"
                  ]
                ]
              }
            }
        },
        "CreationPolicy": {
            "ResourceSignal": {
                "Timeout": "PT5M"
            }
        }
    },
    "web2": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
            "InstanceType": "t2.micro",
            "ImageId": {"Ref": "AMI"},
            "IamInstanceProfile": {
              "Ref": "SSMInstanceProfile"
            },
            "KeyName": {
                "Ref": "KeyName"
            },
            "NetworkInterfaces": [
                {
                    "GroupSet": [
                        {
                            "Ref": "WebServerSecurityGroup"
                        }
                    ],
                    "AssociatePublicIpAddress": "true",
                    "DeviceIndex": "0",
                    "DeleteOnTermination": "true",
                    "SubnetId": {
                        "Ref": "publicSubnet2"
                    }
                }
            ],
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "web2"
                }
            ],
            "UserData" : {
              "Fn::Base64" : {
                "Fn::Join" : [
                  "", [
                    "#!/bin/bash -xe\n",
                    "ssh-keygen -f /home/ec2-user/.ssh/web2-key.pem -q -N \"\"\n",
                    "chown ec2-user:ec2-user /home/ec2-user/.ssh/web2-key.pem\n",
                    "chown ec2-user:ec2-user /home/ec2-user/.ssh/web2-key.pem.pub\n",
                    "PEMFILE=`cat /home/ec2-user/.ssh/web2-key.pem`\n",
                    "aws ssm put-parameter --name ", { "Ref" : "web2pem" }, " --type String --value \"${PEMFILE}\" --overwrite --region ", { "Ref" : "AWS::Region" },"\n",
                    "cat /home/ec2-user/.ssh/web2-key.pem.pub >> /home/ec2-user/.ssh/authorized_keys\n",
                    "# Signal the status from cfn-init\n",
                    "/opt/aws/bin/cfn-signal -e $? ",
                    "         --stack ",
                    {
                        "Ref": "AWS::StackName"
                    },
                    "         --resource web2 ",
                    "         --region ",
                    {
                        "Ref": "AWS::Region"
                    },
                    "\n"
                  ]
                ]
              }
            }
        },
        "CreationPolicy": {
            "ResourceSignal": {
                "Timeout": "PT5M"
            }
        }
    },
    "mgmt1": {
        "Type": "AWS::EC2::Instance",
        "DependsOn" : ["web1", "web2"],
        "Properties": {
            "InstanceType": "t2.micro",
            "ImageId": {"Ref": "AMI"},
            "IamInstanceProfile": {
              "Ref": "SSMInstanceProfile"
            },
            "KeyName": {
                "Ref": "KeyName"
            },
            "NetworkInterfaces": [
                {
                    "GroupSet": [
                        {
                            "Ref": "WebServerSecurityGroup"
                        }
                    ],
                    "AssociatePublicIpAddress": "true",
                    "DeviceIndex": "0",
                    "DeleteOnTermination": "true",
                    "SubnetId": {
                        "Ref": "publicSubnet1"
                    }
                }
            ],
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "mgmt1"
                }
            ],
            "UserData" : {
              "Fn::Base64" : {
                "Fn::Join" : [
                  "", [
                    "#!/bin/bash -xe\n",
                    "echo 'PATH=$PATH:/bin:/sbin:/usr/bin:/usr/local/bin' > /etc/environment\n",
                    "export PATH=$PATH:/bin:/sbin:/usr/bin:/usr/local/bin\n",
                    {"Fn::Join" : [
                        "", [
                            "echo 'DATABASE_NAME=",
                            {"Ref": "DBName"},
                            "' >> /etc/environment\n"
                        ]
                    ]},
                    {"Fn::Join" : [
                        "", [
                            "echo 'DATABASE_USERNAME=",
                            {"Ref": "DBUser"},
                            "' >> /etc/environment\n"
                        ]
                    ]},
                    {"Fn::Join" : [
                        "", [
                            "echo 'DATABASE_PASSWORD=",
                            {"Ref": "DBPassword"},
                            "' >> /etc/environment\n"
                        ]
                    ]},
                    {"Fn::Join" : [
                        "", [
                            "echo 'DATABASE_ENDPOINT=",
                            {"Fn::GetAtt": ["wordpressdb","Endpoint.Address"]},
                            "' >> /etc/environment\n"
                        ]
                    ]},
                    "sed -i '/\\bsecure_path\\b/s/$/:\\/usr\\/local\\/bin/' /etc/sudoers\n",
                    "yum-config-manager --enable epel -y\n",
                    "yum install jq -y\n",
                    "amazon-linux-extras install ansible2 -y\n",
                    "mkdir -p /home/ec2-user/ansible_templates\n",
                    "wget -O /home/ec2-user/ansible_templates/wp-config.j2 https://s3.amazonaws.com/seis615/wp-config.j2\n",
                    "echo \"web1 ansible_host=", {"Fn::GetAtt" : ["web1","PrivateIp"]}, " ansible_user=ec2-user ansible_ssh_private_key_file=/home/ec2-user/.ssh/web1-key.pem\" > /etc/ansible/hosts\n",
                     "echo \"web2 ansible_host=", {"Fn::GetAtt" : ["web2","PrivateIp"]}, " ansible_user=ec2-user ansible_ssh_private_key_file=/home/ec2-user/.ssh/web2-key.pem\" >> /etc/ansible/hosts\n",
                    "sed -i '/host_key_checking/s/^#//g' /etc/ansible/ansible.cfg\n",
                    "aws ssm get-parameters --name \"", { "Ref" : "web1pem" }, "\" --region ", { "Ref" : "AWS::Region" }, " | jq '.Parameters[0].Value' --raw-output > /home/ec2-user/.ssh/web1-key.pem\n",
                    "aws ssm get-parameters --name \"", { "Ref" : "web2pem" }, "\" --region ", { "Ref" : "AWS::Region" }, " | jq '.Parameters[0].Value' --raw-output > /home/ec2-user/.ssh/web2-key.pem\n",
                    "chown ec2-user:ec2-user /home/ec2-user/.ssh/*.pem\n",
                    "chmod 600 /home/ec2-user/.ssh/*.pem"
                  ]
                ]
              }
            }
        }
    },
    "WebServerSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "VpcId": {
                "Ref": "wordpressVpc"
            },
            "GroupDescription": "Allow access from HTTP and SSH traffic",
            "SecurityGroupIngress": [
                {
                    "IpProtocol": "tcp",
                    "FromPort": "80",
                    "ToPort": "80",
                    "CidrIp": "0.0.0.0/0"
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "22",
                    "ToPort": "22",
                    "CidrIp": {"Ref": "YourIp"}
                }
            ]
        }
    },
    "WebServerSGIngressTCP22": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Metadata": {
        "Comment": "SSH ingress security rule"
      },
      "Properties" : {
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "SourceSecurityGroupId": { "Ref": "WebServerSecurityGroup" },
        "GroupId": { "Fn::GetAtt": ["WebServerSecurityGroup", "GroupId"]}
      }
    },
    "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {}
    },
    "AttachGateway": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
            "InternetGatewayId": {
                "Ref": "InternetGateway"
            },
            "VpcId": {
                "Ref": "wordpressVpc"
            }
        }
    },
    "PublicRouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
            "VpcId": {
                "Ref": "wordpressVpc"
            }
        }
    },
    "PublicRoute": {
        "Type": "AWS::EC2::Route",
        "Properties": {
            "DestinationCidrBlock": "0.0.0.0/0",
            "RouteTableId": {
                "Ref": "PublicRouteTable"
            },
            "GatewayId": {
                "Ref": "InternetGateway"
            }
        },
        "DependsOn": [
            "InternetGateway", "AttachGateway"
        ]
    },
    "Public1RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "RouteTableId": {
                "Ref": "PublicRouteTable"
            },
            "SubnetId": {
                "Ref": "publicSubnet1"
            }
        }
    },
    "Public2RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "RouteTableId": {
                "Ref": "PublicRouteTable"
            },
            "SubnetId": {
                "Ref": "publicSubnet2"
            }
        }
    }
  },
  "Parameters": {
      "KeyName": {
          "Description": "Name of your EC2 KeyPair to enable SSH access to the instances.",
          "Type": "AWS::EC2::KeyPair::KeyName",
          "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
      },
      "YourIp": {
        "Description": "The current CIDR IP address of your workstation (x.x.x.x/32). http://checkip.amazonaws.com/",
        "Type": "String",
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-9]|3[0-2]))$",
        "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "AMI": {
        "Description": "The EC2 instance AMI",
        "Type": "String",
        "Default": "ami-00dc79254d0461090"
      }
    
  },
  "Outputs": {
      "web1PublicIp": {
        "Value": {"Fn::GetAtt": ["web1","PublicIp"]},
        "Description": "web1 public IP"
      },
      "we2PublicIp": {
        "Value": {"Fn::GetAtt": ["web2","PublicIp"]},
        "Description": "web2 public IP"
      },
      "mgmt1PublicIp": {
          "Value": {"Fn::GetAtt": ["mgmt1","PublicIp"]},
          "Description": "mgmt1 public IP"
      }
  }
}
