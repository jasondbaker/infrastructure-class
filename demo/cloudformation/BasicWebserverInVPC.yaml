---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  YourIp:
    Description: "The current CIDR IP address of your workstation (x.x.x.x/32)."
    Type: "String"
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-9]|3[0-2]))$"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

  KeyName:
    Description: "Name of your EC2 KeyPair to enable SSH access to the instances."
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "must be the name of an existing EC2 KeyPair."

  InstanceType:
    Description: "Webserver instance type."
    Type: "String"
    Default: "t3.micro"
    AllowedValues:
      - "t3.micro"
      - "t3.medium"

Resources:
  ClassVpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: "10.0.0.0/16"
      Tags:
        - Key: Environment
          Value: Class

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ClassVpc
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""

  WebserverSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref ClassVpc
      GroupDescription: "Allow access from SSH traffic"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: !Ref YourIp
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"

  InternetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: stack
        Value: class

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGW
      VpcId: !Ref ClassVpc

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ClassVpc

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref PublicRT
      GatewayId: !Ref InternetGW
    DependsOn:
      - InternetGW

  PublicSubnet1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1

  ClassWebserver:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: "ami-3ea13f29"
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WebserverSG
      Tags:
        - Key: "Name"
          Value: "ClassWebserver"

Outputs:
  WebUrl:
    Value: !Join ["", ["http://", !GetAtt ClassWebserver.PublicIp]]
    Description: "Webserver URL"
